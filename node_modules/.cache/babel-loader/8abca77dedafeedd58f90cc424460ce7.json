{"ast":null,"code":"var arbitraryValueRegex = /^\\[(.+)\\]$/;\nvar fractionRegex = /^\\d+\\/\\d+$/;\nvar stringLengths = /*#__PURE__*/new Set(['px', 'full', 'screen']);\nvar tshirtUnitRegex = /^(\\d+)?(xs|sm|md|lg|xl)$/;\nvar lengthUnitRegex = /\\d+(%|px|em|rem|vh|vw|pt|pc|in|cm|mm|cap|ch|ex|lh|rlh|vi|vb|vmin|vmax)/; // Shadow always begins with x and y offset separated by underscore\n\nvar shadowRegex = /^-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/;\nfunction isLength(classPart) {\n  return !Number.isNaN(Number(classPart)) || stringLengths.has(classPart) || fractionRegex.test(classPart) || isArbitraryLength(classPart);\n}\nfunction isArbitraryLength(classPart) {\n  var _arbitraryValueRegex$;\n  var arbitraryValue = (_arbitraryValueRegex$ = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$[1];\n  if (arbitraryValue) {\n    return arbitraryValue.startsWith('length:') || lengthUnitRegex.test(arbitraryValue);\n  }\n  return false;\n}\nfunction isArbitrarySize(classPart) {\n  var _arbitraryValueRegex$2;\n  var arbitraryValue = (_arbitraryValueRegex$2 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$2[1];\n  return arbitraryValue ? arbitraryValue.startsWith('size:') : false;\n}\nfunction isArbitraryPosition(classPart) {\n  var _arbitraryValueRegex$3;\n  var arbitraryValue = (_arbitraryValueRegex$3 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$3[1];\n  return arbitraryValue ? arbitraryValue.startsWith('position:') : false;\n}\nfunction isArbitraryUrl(classPart) {\n  var _arbitraryValueRegex$4;\n  var arbitraryValue = (_arbitraryValueRegex$4 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$4[1];\n  return arbitraryValue ? arbitraryValue.startsWith('url(') || arbitraryValue.startsWith('url:') : false;\n}\nfunction isArbitraryNumber(classPart) {\n  var _arbitraryValueRegex$5;\n  var arbitraryValue = (_arbitraryValueRegex$5 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$5[1];\n  return arbitraryValue ? !Number.isNaN(Number(arbitraryValue)) || arbitraryValue.startsWith('number:') : false;\n}\n/**\r\n * @deprecated Will be removed in next major version. Use `isArbitraryNumber` instead.\r\n */\n\nvar isArbitraryWeight = isArbitraryNumber;\nfunction isInteger(classPart) {\n  var _arbitraryValueRegex$6;\n  var arbitraryValue = (_arbitraryValueRegex$6 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$6[1];\n  if (arbitraryValue) {\n    return Number.isInteger(Number(arbitraryValue));\n  }\n  return Number.isInteger(Number(classPart));\n}\nfunction isArbitraryValue(classPart) {\n  return arbitraryValueRegex.test(classPart);\n}\nfunction isAny() {\n  return true;\n}\nfunction isTshirtSize(classPart) {\n  return tshirtUnitRegex.test(classPart);\n}\nfunction isArbitraryShadow(classPart) {\n  var _arbitraryValueRegex$7;\n  var arbitraryValue = (_arbitraryValueRegex$7 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$7[1];\n  if (arbitraryValue) {\n    return shadowRegex.test(arbitraryValue);\n  }\n  return false;\n}\nexport { isAny, isArbitraryLength, isArbitraryNumber, isArbitraryPosition, isArbitraryShadow, isArbitrarySize, isArbitraryUrl, isArbitraryValue, isArbitraryWeight, isInteger, isLength, isTshirtSize };","map":{"version":3,"mappings":"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","names":["arbitraryValueRegex","fractionRegex","stringLengths","Set","tshirtUnitRegex","lengthUnitRegex","shadowRegex","isLength","classPart","Number","isNaN","has","test","isArbitraryLength","arbitraryValue","exec","_arbitraryValueRegex$","startsWith","isArbitrarySize","_arbitraryValueRegex$2","isArbitraryPosition","_arbitraryValueRegex$3","isArbitraryUrl","_arbitraryValueRegex$4","isArbitraryNumber","_arbitraryValueRegex$5","isArbitraryWeight","isInteger","_arbitraryValueRegex$6","isArbitraryValue","isAny","isTshirtSize","isArbitraryShadow","_arbitraryValueRegex$7"],"sources":["/Users/arishtripathi/Desktop/Project-Panacea/panacea/node_modules/tailwind-merge/src/lib/validators.ts"],"sourcesContent":["const arbitraryValueRegex = /^\\[(.+)\\]$/\nconst fractionRegex = /^\\d+\\/\\d+$/\nconst stringLengths = new Set(['px', 'full', 'screen'])\nconst tshirtUnitRegex = /^(\\d+)?(xs|sm|md|lg|xl)$/\nconst lengthUnitRegex = /\\d+(%|px|em|rem|vh|vw|pt|pc|in|cm|mm|cap|ch|ex|lh|rlh|vi|vb|vmin|vmax)/\n// Shadow always begins with x and y offset separated by underscore\nconst shadowRegex = /^-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/\n\nexport function isLength(classPart: string) {\n    return (\n        !Number.isNaN(Number(classPart)) ||\n        stringLengths.has(classPart) ||\n        fractionRegex.test(classPart) ||\n        isArbitraryLength(classPart)\n    )\n}\n\nexport function isArbitraryLength(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    if (arbitraryValue) {\n        return arbitraryValue.startsWith('length:') || lengthUnitRegex.test(arbitraryValue)\n    }\n\n    return false\n}\n\nexport function isArbitrarySize(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    return arbitraryValue ? arbitraryValue.startsWith('size:') : false\n}\n\nexport function isArbitraryPosition(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    return arbitraryValue ? arbitraryValue.startsWith('position:') : false\n}\n\nexport function isArbitraryUrl(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    return arbitraryValue\n        ? arbitraryValue.startsWith('url(') || arbitraryValue.startsWith('url:')\n        : false\n}\n\nexport function isArbitraryNumber(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    return arbitraryValue\n        ? !Number.isNaN(Number(arbitraryValue)) || arbitraryValue.startsWith('number:')\n        : false\n}\n\n/**\n * @deprecated Will be removed in next major version. Use `isArbitraryNumber` instead.\n */\nexport const isArbitraryWeight = isArbitraryNumber\n\nexport function isInteger(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    if (arbitraryValue) {\n        return Number.isInteger(Number(arbitraryValue))\n    }\n\n    return Number.isInteger(Number(classPart))\n}\n\nexport function isArbitraryValue(classPart: string) {\n    return arbitraryValueRegex.test(classPart)\n}\n\nexport function isAny() {\n    return true\n}\n\nexport function isTshirtSize(classPart: string) {\n    return tshirtUnitRegex.test(classPart)\n}\n\nexport function isArbitraryShadow(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    if (arbitraryValue) {\n        return shadowRegex.test(arbitraryValue)\n    }\n\n    return false\n}\n"]},"metadata":{},"sourceType":"module"}